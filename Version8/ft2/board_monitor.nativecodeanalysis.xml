<?xml version='1.0' encoding='UTF-8'?>
<DEFECTS><DEFECT><SFA><FILEPATH>c:\sources\version8\include\</FILEPATH><FILENAME>dstat.h</FILENAME><LINE>32</LINE><COLUMN>54</COLUMN></SFA><DEFECTCODE>6031</DEFECTCODE><DESCRIPTION>Return value ignored: 'lstrcpynA'.</DESCRIPTION><FUNCTION>DSTAT_CLASS::set_cat</FUNCTION><DECORATED>?set_cat@DSTAT_CLASS@@QAEXPAD@Z</DECORATED><FUNCLINE>32</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\sources\version8\include\</FILEPATH><FILENAME>dstat.h</FILENAME><LINE>33</LINE><COLUMN>60</COLUMN></SFA><DEFECTCODE>6031</DEFECTCODE><DESCRIPTION>Return value ignored: 'lstrcpynA'.</DESCRIPTION><FUNCTION>DSTAT_CLASS::set_subcat</FUNCTION><DECORATED>?set_subcat@DSTAT_CLASS@@QAEXPAD@Z</DECORATED><FUNCLINE>33</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>1110</LINE><COLUMN>48</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>FTII_BOARD_ENTRY::check_inputs</FUNCTION><DECORATED>?check_inputs@FTII_BOARD_ENTRY@@QAEXPAD@Z</DECORATED><FUNCLINE>1055</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>1128</LINE><COLUMN>44</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>FTII_BOARD_ENTRY::check_inputs</FUNCTION><DECORATED>?check_inputs@FTII_BOARD_ENTRY@@QAEXPAD@Z</DECORATED><FUNCLINE>1055</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>2857</LINE><COLUMN>46</COLUMN></SFA><DEFECTCODE>6011</DEFECTCODE><DESCRIPTION>Dereferencing NULL pointer 'Boards'. </DESCRIPTION><FUNCTION>load_ftii_boards</FUNCTION><DECORATED>?load_ftii_boards@@YAHXZ</DECORATED><FUNCLINE>2800</FUNCLINE><PROBABILITY>1</PROBABILITY><RANK>4</RANK><CATEGORY><RULECATEGORY>mspft</RULECATEGORY></CATEGORY><PATH><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>2802</LINE><COLUMN>11</COLUMN></SFA><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>2803</LINE><COLUMN>11</COLUMN></SFA><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>2804</LINE><COLUMN>11</COLUMN></SFA><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>2805</LINE><COLUMN>11</COLUMN></SFA><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>2806</LINE><COLUMN>11</COLUMN></SFA><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>2808</LINE><COLUMN>5</COLUMN><KEYEVENT><ID>1</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>'Boards' may be NULL (Skip this branch)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>2815</LINE><COLUMN>23</COLUMN></SFA><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>2816</LINE><COLUMN>18</COLUMN><KEYEVENT><ID>2</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Skip this branch, (assume 's.file_exists()' is false)</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>2853</LINE><COLUMN>15</COLUMN><KEYEVENT><ID>3</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Enter this branch, (assume 'NofBoards&gt;0')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>2855</LINE><COLUMN>11</COLUMN></SFA><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>2855</LINE><COLUMN>16</COLUMN><KEYEVENT><ID>4</ID><KIND>branch</KIND><IMPORTANCE>Full</IMPORTANCE><MESSAGE>Enter this loop, (assume 'i&lt;NofBoards')</MESSAGE></KEYEVENT></SFA><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>2857</LINE><COLUMN>46</COLUMN><KEYEVENT><ID>5</ID><KIND>usage</KIND><IMPORTANCE>Essential</IMPORTANCE><MESSAGE>'Boards' is dereferenced, but may still be NULL</MESSAGE></KEYEVENT></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>3161</LINE><COLUMN>59</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>check_for_cycle_start</FUNCTION><DECORATED>?check_for_cycle_start@@YA_NPAVFTII_BOARD_ENTRY@@PAD@Z</DECORATED><FUNCLINE>3082</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>3823</LINE><COLUMN>55</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>check_for_timeouts</FUNCTION><DECORATED>?check_for_timeouts@@YAXXZ</DECORATED><FUNCLINE>3757</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>4218</LINE><COLUMN>30</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>send_thread</FUNCTION><DECORATED>?send_thread@@YAXPAX@Z</DECORATED><FUNCLINE>4190</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>4289</LINE><COLUMN>21</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>send_thread</FUNCTION><DECORATED>?send_thread@@YAXPAX@Z</DECORATED><FUNCLINE>4190</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>4300</LINE><COLUMN>26</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>send_thread</FUNCTION><DECORATED>?send_thread@@YAXPAX@Z</DECORATED><FUNCLINE>4190</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\sources\version8\ft2\</FILEPATH><FILENAME>board_monitor.cpp</FILENAME><LINE>4672</LINE><COLUMN>51</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>read_thread</FUNCTION><DECORATED>?read_thread@@YAXPAX@Z</DECORATED><FUNCLINE>4625</FUNCLINE><PATH/></DEFECT></DEFECTS>