struct DESCRIPTION_LIST_ENTRY
{
TCHAR * desc;
int     index;
};

const int SP_DISTANCE_UNITS_INDEX = 0;
const int SP_VELOCITY_UNITS_INDEX = 1;
const int SP_TSL_INDEX = 2;
const int SP_MSL_INDEX = 3;
const int SP_EOS_VEL_INDEX = 4;
const int SP_PLUNGER_DIAMETER_INDEX = 5;
const int SP_SLEEVE_FILL_INDEX = 6;
const int SP_RUNNER_FILL_INDEX = 7;
const int SP_MIN_CSFS_POS_INDEX = 8;
const int SP_MIN_CSFS_VEL_INDEX = 9;
const int SP_RISE_CSFS_VEL_INDEX = 10;
const int SP_TIME_FOR_INTENS_PRES_INDEX = 11;
const int SP_PRES_FOR_RESP_TIME_INDEX = 12;
const int SP_TIME_DELAY_BISCUIT_INDEX = 13;
const int SP_USER_VEL_1_INDEX = 14;
const int SP_USER_VEL_2_INDEX = 15;
const int SP_USER_VEL_3_INDEX = 16;
const int SP_USER_VEL_4_INDEX = 17;
const int SP_USER_AVG_START_1_INDEX = 18;
const int SP_USER_AVG_START_2_INDEX = 19;
const int SP_USER_AVG_START_3_INDEX = 20;
const int SP_USER_AVG_START_4_INDEX = 21;
const int SP_USER_AVG_END_1_INDEX = 22;
const int SP_USER_AVG_END_2_INDEX = 23;
const int SP_USER_AVG_END_3_INDEX = 24;
const int SP_USER_AVG_END_4_INDEX = 25;
const int SP_GOOD_SHOT_WIRE_INDEX = 26;
const int SP_GOOD_SHOT_USE_WARN_INDEX = 27;
const int SP_ALARM_TIMEOUT_INDEX = 28;
const int SP_CHANNEL_01_SENSOR_INDEX = 29;
const int SP_CHANNEL_02_SENSOR_INDEX = 30;
const int SP_CHANNEL_03_SENSOR_INDEX = 31;
const int SP_CHANNEL_04_SENSOR_INDEX = 32;
const int SP_CHANNEL_05_SENSOR_INDEX = 33;
const int SP_CHANNEL_06_SENSOR_INDEX = 34;
const int SP_CHANNEL_07_SENSOR_INDEX = 35;
const int SP_CHANNEL_08_SENSOR_INDEX = 36;
const int SP_CHANNEL_09_SENSOR_INDEX = 37;
const int SP_CHANNEL_10_SENSOR_INDEX = 38;
const int SP_CHANNEL_11_SENSOR_INDEX = 39;
const int SP_CHANNEL_12_SENSOR_INDEX = 40;
const int SP_CHANNEL_13_SENSOR_INDEX = 41;
const int SP_CHANNEL_14_SENSOR_INDEX = 42;
const int SP_CHANNEL_15_SENSOR_INDEX = 43;
const int SP_CHANNEL_16_SENSOR_INDEX = 44;
const int SP_HEAD_PRES_CHANNEL_INDEX = 45;
const int SP_ROD_PRES_CHANNEL_INDEX = 46;
const int SP_SC_ACCEL_1_INDEX = 47;
const int SP_SC_VEL_1_INDEX = 48;
const int SP_SC_END_POS_1_INDEX = 49;
const int SP_SC_VAC_WAIT_1_INDEX = 50;
const int SP_LOW_IMPACT_1_INDEX = 51;
const int SP_LOW_IMPACT_FROM_INPUT_1_INDEX = 52;
const int SP_SC_ACCEL_2_INDEX = 53;
const int SP_SC_VEL_2_INDEX = 54;
const int SP_SC_END_POS_2_INDEX = 55;
const int SP_SC_VAC_WAIT_2_INDEX = 56;
const int SP_LOW_IMPACT_2_INDEX = 57;
const int SP_LOW_IMPACT_FROM_INPUT_2_INDEX = 58;
const int SP_SC_ACCEL_3_INDEX = 59;
const int SP_SC_VEL_3_INDEX = 60;
const int SP_SC_END_POS_3_INDEX = 61;
const int SP_SC_VAC_WAIT_3_INDEX = 62;
const int SP_LOW_IMPACT_3_INDEX = 63;
const int SP_LOW_IMPACT_FROM_INPUT_3_INDEX = 64;
const int SP_SC_ACCEL_4_INDEX = 65;
const int SP_SC_VEL_4_INDEX = 66;
const int SP_SC_END_POS_4_INDEX = 67;
const int SP_SC_VAC_WAIT_4_INDEX = 68;
const int SP_LOW_IMPACT_4_INDEX = 69;
const int SP_LOW_IMPACT_FROM_INPUT_4_INDEX = 70;
const int SP_SC_ACCEL_5_INDEX = 71;
const int SP_SC_VEL_5_INDEX = 72;
const int SP_SC_END_POS_5_INDEX = 73;
const int SP_SC_VAC_WAIT_5_INDEX = 74;
const int SP_LOW_IMPACT_5_INDEX = 75;
const int SP_LOW_IMPACT_FROM_INPUT_5_INDEX = 76;
const int SP_SC_ACCEL_6_INDEX = 77;
const int SP_SC_VEL_6_INDEX = 78;
const int SP_SC_END_POS_6_INDEX = 79;
const int SP_SC_VAC_WAIT_6_INDEX = 80;
const int SP_LOW_IMPACT_6_INDEX = 81;
const int SP_LOW_IMPACT_FROM_INPUT_6_INDEX = 82;
const int SP_VAC_LS_INDEX = 83;
const int SP_LS1_POS_INDEX = 84;
const int SP_LS2_POS_INDEX = 85;
const int SP_LS3_POS_INDEX = 86;
const int SP_LS4_POS_INDEX = 87;
const int SP_LS5_POS_INDEX = 88;
const int SP_LS6_POS_INDEX = 89;
const int SP_LS1_DESC_INDEX = 90;
const int SP_LS2_DESC_INDEX = 91;
const int SP_LS3_DESC_INDEX = 92;
const int SP_LS4_DESC_INDEX = 93;
const int SP_LS5_DESC_INDEX = 94;
const int SP_LS6_DESC_INDEX = 95;
const int SP_LS1_WIRE_INDEX = 96;
const int SP_LS2_WIRE_INDEX = 97;
const int SP_LS3_WIRE_INDEX = 98;
const int SP_LS4_WIRE_INDEX = 99;
const int SP_LS5_WIRE_INDEX = 100;
const int SP_LS6_WIRE_INDEX = 101;
const int SP_VEL_LOOP_GAIN_INDEX = 102;
const int SP_BREAK_VEL_1_INDEX = 103;
const int SP_BREAK_GAIN_1_INDEX = 104;
const int SP_INTEGRAL_GAIN_INDEX = 105;
const int SP_DERIVATIVE_GAIN_INDEX = 106;
const int SP_FT_STOP_POS_INDEX = 107;
const int SP_WU_ENABLE_INDEX = 108;
const int SP_WU_PART_INDEX = 109;
const int SP_WU_WIRE_INDEX = 110;
const int SP_WU_WIRE_STATE_INDEX = 111;
const int SP_PC_ENABLE_INDEX = 112;
const int SP_PC_POSITIVE_ONLY_INDEX = 113;
const int SP_RC_ENABLE_INDEX = 114;
const int SP_PC_HARDWARE_CLOSED_LOOP_INDEX = 115;
const int SP_PC_ALL_PERCENT_INDEX = 116;
const int SP_PC_RAMP_1_INDEX = 117;
const int SP_PC_GOOSE_1_INDEX = 118;
const int SP_PC_PRES_1_INDEX = 119;
const int SP_PC_HOLD_TIME_1_INDEX = 120;
const int SP_PC_RAMP_2_INDEX = 121;
const int SP_PC_GOOSE_2_INDEX = 122;
const int SP_PC_PRES_2_INDEX = 123;
const int SP_PC_HOLD_TIME_2_INDEX = 124;
const int SP_PC_RAMP_3_INDEX = 125;
const int SP_PC_GOOSE_3_INDEX = 126;
const int SP_PC_PRES_3_INDEX = 127;
const int SP_PC_HOLD_TIME_3_INDEX = 128;
const int SP_PC_SENSOR_INDEX = 129;
const int SP_PC_VOLT_RANGE_INDEX = 130;
const int SP_PC_ARM_LS_INDEX = 131;
const int SP_PC_LOOP_GAIN_INDEX = 132;
const int SP_PC_INTEGRAL_GAIN_INDEX = 133;
const int SP_PC_DERIVATIVE_GAIN_INDEX = 134;
const int SP_PC_RETRACT_VOLTS_INDEX = 135;
const int SP_PC_PARK_VOLTS_INDEX = 136;
const int SP_RC_ARM_PERCENT_INDEX = 137;
const int SP_RC_RETRACT_PERCENT_INDEX = 138;

const int SP_PARAM_DESC_INDEX = 0;
const int SP_PARAM_INPUT_INDEX = 1;
const int SP_PARAM_INPUT_NUMBER_INDEX = 2;
const int SP_PARAM_VAR_TYPE_INDEX = 3;
const int SP_PARAM_UNITS_INDEX = 4;
const int SP_PARAM_LOW_WARN_LIMIT_INDEX = 5;
const int SP_PARAM_LOW_WARN_WIRE_INDEX = 6;
const int SP_PARAM_HIGH_WARN_LIMIT_INDEX = 7;
const int SP_PARAM_HIGH_WARN_WIRE_INDEX = 8;
const int SP_PARAM_LOW_ALARM_LIMIT_INDEX = 9;
const int SP_PARAM_LOW_ALARM_WIRE_INDEX = 10;
const int SP_PARAM_HIGH_ALARM_LIMIT_INDEX = 11;
const int SP_PARAM_HIGH_ALARM_WIRE_INDEX = 12;
const int SP_PARAM_ANALOG_CHAN_INDEX = 13;
const int SP_PARAM_RESULT_TYPE_INDEX = 14;
const int SP_PARAM_IVAR_TYPE_INDEX = 15;
const int SP_PARAM_IVAR_VALUE_INDEX = 16;
const int SP_PARAM_END_VALUE_INDEX = 17;

const int SP_MARK_TYPE_INDEX   = 0;
const int SP_MARK_NUMBER_INDEX = 1;
const int SP_MARK_SYMBOL_INDEX = 2;
const int SP_MARK_COLOR_INDEX  = 3;
const int SP_MARK_LABEL_INDEX  = 4;
const int SP_MARK_ENABLE_INDEX = 5;

DESCRIPTION_LIST_ENTRY DescList[] = {
{TEXT("Distance Units"),SP_DISTANCE_UNITS_INDEX },
{TEXT("Velocity Units"),SP_VELOCITY_UNITS_INDEX },
{TEXT("Total Stroke Length"), SP_TSL_INDEX },
{TEXT("Min Stroke Length"), SP_MSL_INDEX },
{TEXT("End of Shot Velocity"), SP_EOS_VEL_INDEX },
{TEXT("Plunger Diameter"), SP_PLUNGER_DIAMETER_INDEX },
{TEXT("Sleeve Fill Distance"), SP_SLEEVE_FILL_INDEX },
{TEXT("Runner Fill Distance"), SP_RUNNER_FILL_INDEX },
{TEXT("Min CSFS Position"), SP_MIN_CSFS_POS_INDEX },
{TEXT("Min Velocity for CSFS"), SP_MIN_CSFS_VEL_INDEX },
{TEXT("Velocity for Rise CSFS"), SP_RISE_CSFS_VEL_INDEX },
{TEXT("Time for Intens Pres"), SP_TIME_FOR_INTENS_PRES_INDEX },
{TEXT("Pres for Response Time"), SP_PRES_FOR_RESP_TIME_INDEX },
{TEXT("Time Delay Biscuit"), SP_TIME_DELAY_BISCUIT_INDEX },
{TEXT("User Vel 1"), SP_USER_VEL_1_INDEX },
{TEXT("User Vel 2"), SP_USER_VEL_2_INDEX },
{TEXT("User Vel 3"), SP_USER_VEL_3_INDEX },
{TEXT("User Vel 4"), SP_USER_VEL_4_INDEX },
{TEXT("User Avg Start 1"), SP_USER_AVG_START_1_INDEX },
{TEXT("User Avg Start 2"), SP_USER_AVG_START_2_INDEX },
{TEXT("User Avg Start 3"), SP_USER_AVG_START_3_INDEX },
{TEXT("User Avg Start 4"), SP_USER_AVG_START_4_INDEX },
{TEXT("User Avg End 1"), SP_USER_AVG_END_1_INDEX },
{TEXT("User Avg End 2"), SP_USER_AVG_END_2_INDEX },
{TEXT("User Avg End 3"), SP_USER_AVG_END_3_INDEX },
{TEXT("User Avg End 4"), SP_USER_AVG_END_4_INDEX },
{TEXT("Good Shot Wire"), SP_GOOD_SHOT_WIRE_INDEX },
{TEXT("Good Shot Use Warn"), SP_GOOD_SHOT_USE_WARN_INDEX },
{TEXT("Alarm Timeout"), SP_ALARM_TIMEOUT_INDEX },
{TEXT("Channel 01"), SP_CHANNEL_01_SENSOR_INDEX },
{TEXT("Channel 02"), SP_CHANNEL_02_SENSOR_INDEX },
{TEXT("Channel 03"), SP_CHANNEL_03_SENSOR_INDEX },
{TEXT("Channel 04"), SP_CHANNEL_04_SENSOR_INDEX },
{TEXT("Channel 05"), SP_CHANNEL_05_SENSOR_INDEX },
{TEXT("Channel 06"), SP_CHANNEL_06_SENSOR_INDEX },
{TEXT("Channel 07"), SP_CHANNEL_07_SENSOR_INDEX },
{TEXT("Channel 08"), SP_CHANNEL_08_SENSOR_INDEX },
{TEXT("Channel 09"), SP_CHANNEL_09_SENSOR_INDEX },
{TEXT("Channel 10"), SP_CHANNEL_10_SENSOR_INDEX },
{TEXT("Channel 11"), SP_CHANNEL_11_SENSOR_INDEX },
{TEXT("Channel 12"), SP_CHANNEL_12_SENSOR_INDEX },
{TEXT("Channel 13"), SP_CHANNEL_13_SENSOR_INDEX },
{TEXT("Channel 14"), SP_CHANNEL_14_SENSOR_INDEX },
{TEXT("Channel 15"), SP_CHANNEL_15_SENSOR_INDEX },
{TEXT("Channel 16"), SP_CHANNEL_16_SENSOR_INDEX },
{TEXT("Head Pres Channel"), SP_HEAD_PRES_CHANNEL_INDEX },
{TEXT("Rod Pres Channel"), SP_ROD_PRES_CHANNEL_INDEX },
{TEXT("Accel 1"), SP_SC_ACCEL_1_INDEX },
{TEXT("Velocity 1"), SP_SC_VEL_1_INDEX },
{TEXT("End Pos 1"), SP_SC_END_POS_1_INDEX },
{TEXT("Vac Wait 1"), SP_SC_VAC_WAIT_1_INDEX },
{TEXT("Low Impact 1"), SP_LOW_IMPACT_1_INDEX },
{TEXT("Low Impact from Input 1"), SP_LOW_IMPACT_FROM_INPUT_1_INDEX },
{TEXT("Accel 2"), SP_SC_ACCEL_2_INDEX },
{TEXT("Velocity 2"), SP_SC_VEL_2_INDEX },
{TEXT("End Pos 2"), SP_SC_END_POS_2_INDEX },
{TEXT("Vac Wait 2"), SP_SC_VAC_WAIT_2_INDEX },
{TEXT("Low Impact 2"), SP_LOW_IMPACT_2_INDEX },
{TEXT("Low Impact from Input 2"), SP_LOW_IMPACT_FROM_INPUT_2_INDEX },
{TEXT("Accel 3"), SP_SC_ACCEL_3_INDEX },
{TEXT("Velocity 3"), SP_SC_VEL_3_INDEX },
{TEXT("End Pos 3"), SP_SC_END_POS_3_INDEX },
{TEXT("Vac Wait 3"), SP_SC_VAC_WAIT_3_INDEX },
{TEXT("Low Impact 3"), SP_LOW_IMPACT_3_INDEX },
{TEXT("Low Impact from Input 3"), SP_LOW_IMPACT_FROM_INPUT_3_INDEX },
{TEXT("Accel 4"), SP_SC_ACCEL_4_INDEX },
{TEXT("Velocity 4"), SP_SC_VEL_4_INDEX },
{TEXT("End Pos 4"), SP_SC_END_POS_4_INDEX },
{TEXT("Vac Wait 4"), SP_SC_VAC_WAIT_4_INDEX },
{TEXT("Low Impact 4"), SP_LOW_IMPACT_4_INDEX },
{TEXT("Low Impact from Input 4"), SP_LOW_IMPACT_FROM_INPUT_4_INDEX },
{TEXT("Accel 5"), SP_SC_ACCEL_5_INDEX },
{TEXT("Velocity 5"), SP_SC_VEL_5_INDEX },
{TEXT("End Pos 5"), SP_SC_END_POS_5_INDEX },
{TEXT("Vac Wait 5"), SP_SC_VAC_WAIT_5_INDEX },
{TEXT("Low Impact 5"), SP_LOW_IMPACT_5_INDEX },
{TEXT("Low Impact from Input 5"), SP_LOW_IMPACT_FROM_INPUT_5_INDEX },
{TEXT("Accel 6"), SP_SC_ACCEL_6_INDEX },
{TEXT("Velocity 6"), SP_SC_VEL_6_INDEX },
{TEXT("End Pos 6"), SP_SC_END_POS_6_INDEX },
{TEXT("Vac Wait 6"), SP_SC_VAC_WAIT_6_INDEX },
{TEXT("Low Impact 6"), SP_LOW_IMPACT_6_INDEX },
{TEXT("Low Impact from Input 6"), SP_LOW_IMPACT_FROM_INPUT_6_INDEX },
{TEXT("Vac Limit Switch"), SP_VAC_LS_INDEX },
{TEXT("LS 1 Pos"), SP_LS1_POS_INDEX },
{TEXT("LS 2 Pos"), SP_LS2_POS_INDEX },
{TEXT("LS 3 Pos"), SP_LS3_POS_INDEX },
{TEXT("LS 4 Pos"), SP_LS4_POS_INDEX },
{TEXT("LS 5 Pos"), SP_LS5_POS_INDEX },
{TEXT("LS 6 Pos"), SP_LS6_POS_INDEX },
{TEXT("LS 1 Desc"), SP_LS1_DESC_INDEX },
{TEXT("LS 2 Desc"), SP_LS2_DESC_INDEX },
{TEXT("LS 3 Desc"), SP_LS3_DESC_INDEX },
{TEXT("LS 4 Desc"), SP_LS4_DESC_INDEX },
{TEXT("LS 5 Desc"), SP_LS5_DESC_INDEX },
{TEXT("LS 6 Desc"), SP_LS6_DESC_INDEX },
{TEXT("LS 1 Wire"), SP_LS1_WIRE_INDEX },
{TEXT("LS 2 Wire"), SP_LS2_WIRE_INDEX },
{TEXT("LS 3 Wire"), SP_LS3_WIRE_INDEX },
{TEXT("LS 4 Wire"), SP_LS4_WIRE_INDEX },
{TEXT("LS 5 Wire"), SP_LS5_WIRE_INDEX },
{TEXT("LS 6 Wire"), SP_LS6_WIRE_INDEX },
{TEXT("Velocity Loop Gain"), SP_VEL_LOOP_GAIN_INDEX },
{TEXT("Break Velocity 1"), SP_BREAK_VEL_1_INDEX },
{TEXT("Break Gain 1"), SP_BREAK_GAIN_1_INDEX },
{TEXT("Integral Gain"), SP_INTEGRAL_GAIN_INDEX },
{TEXT("Derivative Gain"), SP_DERIVATIVE_GAIN_INDEX },
{TEXT("FT Stop Pos"), SP_FT_STOP_POS_INDEX },
{TEXT("Warm Up Enable"), SP_WU_ENABLE_INDEX },
{TEXT("Warm Up Part"), SP_WU_PART_INDEX },
{TEXT("Warm Up Wire"), SP_WU_WIRE_INDEX },
{TEXT("Warm Up Wire State"), SP_WU_WIRE_STATE_INDEX },
{TEXT("PC Enable"), SP_PC_ENABLE_INDEX },
{TEXT("PC Positive Only"), SP_PC_POSITIVE_ONLY_INDEX },
{TEXT("PC RC Enable"), SP_RC_ENABLE_INDEX },
{TEXT("PC Hardware Closed Loop"), SP_PC_HARDWARE_CLOSED_LOOP_INDEX },
{TEXT("PC All Percent"), SP_PC_ALL_PERCENT_INDEX },
{TEXT("PC Ramp 1"),      SP_PC_RAMP_1_INDEX },
{TEXT("PC Goose 1"),     SP_PC_GOOSE_1_INDEX },
{TEXT("PC Pres 1"),      SP_PC_PRES_1_INDEX },
{TEXT("PC Hold Time 1"), SP_PC_HOLD_TIME_1_INDEX },
{TEXT("PC Ramp 2"),      SP_PC_RAMP_2_INDEX },
{TEXT("PC Goose 2"),     SP_PC_GOOSE_2_INDEX },
{TEXT("PC Pres 2"),      SP_PC_PRES_2_INDEX },
{TEXT("PC Hold Time 2"), SP_PC_HOLD_TIME_2_INDEX },
{TEXT("PC Ramp 3"),      SP_PC_RAMP_3_INDEX },
{TEXT("PC Goose 3"),     SP_PC_GOOSE_3_INDEX },
{TEXT("PC Pres 3"),      SP_PC_PRES_3_INDEX },
{TEXT("PC Hold Time 3"), SP_PC_HOLD_TIME_3_INDEX },
{TEXT("PC Sensor"), SP_PC_SENSOR_INDEX },
{TEXT("PC Volt Range"), SP_PC_VOLT_RANGE_INDEX },
{TEXT("PC Arm LS"),     SP_PC_ARM_LS_INDEX },
{TEXT("PC Loop Gain"),  SP_PC_LOOP_GAIN_INDEX },
{TEXT("PC Integral Gain"), SP_PC_INTEGRAL_GAIN_INDEX },
{TEXT("PC Derivative Gain"), SP_PC_DERIVATIVE_GAIN_INDEX },
{TEXT("PC Retract Volts"), SP_PC_RETRACT_VOLTS_INDEX },
{TEXT("PC Park Volts"),    SP_PC_PARK_VOLTS_INDEX },
{TEXT("RC Arm Percent"),   SP_RC_ARM_PERCENT_INDEX },
{TEXT("RC Retract Percent"), SP_RC_RETRACT_PERCENT_INDEX }
};
const int NofDescriptions = sizeof(DescList)/sizeof(DESCRIPTION_LIST_ENTRY);

/*
-----------------------------
Param 02 Desc,Total Shot Time
----------------------------- */
DESCRIPTION_LIST_ENTRY ParamDescList[] = {
{TEXT("Desc"), SP_PARAM_DESC_INDEX },
{TEXT("Input Type"), SP_PARAM_INPUT_INDEX },
{TEXT("Input Number"), SP_PARAM_INPUT_NUMBER_INDEX },
{TEXT("Var Type"),     SP_PARAM_VAR_TYPE_INDEX },
{TEXT("Units"),        SP_PARAM_UNITS_INDEX },
{TEXT("Low Warn Limit"),  SP_PARAM_LOW_WARN_LIMIT_INDEX },
{TEXT("Low Warn Wire"),   SP_PARAM_LOW_WARN_WIRE_INDEX },
{TEXT("High Warn Limit"), SP_PARAM_HIGH_WARN_LIMIT_INDEX },
{TEXT("High Warn Wire"),  SP_PARAM_HIGH_WARN_WIRE_INDEX },
{TEXT("Low Alarm Limit"), SP_PARAM_LOW_ALARM_LIMIT_INDEX },
{TEXT("Low Alarm Wire"),  SP_PARAM_LOW_ALARM_WIRE_INDEX },
{TEXT("High Alarm Limit"), SP_PARAM_HIGH_ALARM_LIMIT_INDEX },
{TEXT("High Alarm Wire"),  SP_PARAM_HIGH_ALARM_WIRE_INDEX },
{TEXT("Analog Channel"), SP_PARAM_ANALOG_CHAN_INDEX },
{TEXT("Result Type"), SP_PARAM_RESULT_TYPE_INDEX },
{TEXT("IVar Type"), SP_PARAM_IVAR_TYPE_INDEX },
{TEXT("IVar Value"), SP_PARAM_IVAR_VALUE_INDEX },
{TEXT("End Value"), SP_PARAM_END_VALUE_INDEX }
};
const int NofParamDescriptions = sizeof(ParamDescList)/sizeof(DESCRIPTION_LIST_ENTRY);

/*
--------------------------------------
{"Mark 1 Color",  MARK__COLOR_INDEX },
-------------------------------------- */
DESCRIPTION_LIST_ENTRY MarkDescList[] = {
{TEXT("Type"),   SP_MARK_TYPE_INDEX },
{TEXT("Number"), SP_MARK_NUMBER_INDEX },
{TEXT("Symbol"), SP_MARK_SYMBOL_INDEX },
{TEXT("Color"),  SP_MARK_COLOR_INDEX },
{TEXT("Label"),  SP_MARK_LABEL_INDEX },
{TEXT("Enable"), SP_MARK_ENABLE_INDEX }
};
const int NofMarkDescriptions = sizeof(MarkDescList)/sizeof(DESCRIPTION_LIST_ENTRY);

